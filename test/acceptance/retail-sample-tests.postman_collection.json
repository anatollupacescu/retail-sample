{
	"info": {
		"_postman_id": "cc523c20-bdf7-409c-9d4b-761a01721bd3",
		"name": "retail-sample-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "health",
			"item": [
				{
					"name": "check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eea105d7-c9d1-4096-8ef8-cfd1f8234e55",
								"exec": [
									"pm.test(\"response should be 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/health",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "inventory",
			"item": [
				{
					"name": "create",
					"item": [
						{
							"name": "create inventory item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3678ab40-d827-4c2c-8972-0a15d31a9259",
										"exec": [
											"pm.test(\"status is 201 CREATED\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"pm.test(\"response time is within 100 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(100);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"descriptor entity has an id\", function() {",
											"    let itemName = pm.environment.get(\"inventory_item_name\");",
											"    let responseJson = pm.response.json();",
											"    let itemID = responseJson.data.id;",
											"    pm.expect(itemID).to.be.above(0);",
											"})",
											"",
											"pm.test(\"save inventory id\", function() {",
											"    let itemName = pm.environment.get(\"inventory_item_name\");",
											"    let responseJson = pm.response.json();",
											"    let itemID = responseJson.data.id;",
											"    pm.environment.set(\"inventory_item_id\", itemID);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f5905ee8-f206-4fab-acb6-ebc3cbea22cc",
										"exec": [
											"let uuid = require('uuid')",
											"pm.environment.set(\"inventory_item_name\", uuid())",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{inventory_item_name}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/inventory",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"inventory"
									]
								}
							},
							"response": []
						},
						{
							"name": "check inventory item was created",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9dc19db4-9c6a-480b-9415-3deb6e219810",
										"exec": [
											"pm.test(\"status is 200 OK\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"response time is within 50 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(50);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"body contains newly created item name\", function () {",
											"    let jsonData = pm.response.json();",
											"    let expectedItemName = pm.environment.get(\"inventory_item_name\")",
											"    ",
											"    let obj = {",
											"        id: pm.environment.get(\"inventory_item_id\"),",
											"        name: pm.environment.get(\"inventory_item_name\")",
											"    }",
											"    ",
											"    pm.expect(jsonData.data).to.deep.include(obj);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/inventory/{{inventory_item_id}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"inventory",
										"{{inventory_item_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check item is present in list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e928ada1-2678-407d-8ac5-32c6f7e635c6",
										"exec": [
											"pm.test(\"status is 200 OK\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"response time is within 20 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(20);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"body contains newly created item name\", function () {",
											"    let jsonData = pm.response.json();",
											"    let expectedItemName = pm.environment.get(\"inventory_item_name\")",
											"    pm.expect(jsonData.data.map(toType)).to.include.members([expectedItemName]);",
											"});",
											"",
											"function toType(i) {",
											"    return i.name",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/inventory",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"inventory"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "disable",
					"item": [
						{
							"name": "create inventory item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa9fd948-97c1-489a-9013-c97f28d28d16",
										"exec": [
											"pm.test(\"status is 201 CREATED\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"pm.test(\"response time is within 20 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(20);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"descriptor entity has an id\", function() {",
											"    let itemName = pm.environment.get(\"disabled_item_name\");",
											"    let responseJson = pm.response.json();",
											"    let itemID = responseJson.data.id;",
											"    pm.expect(itemID).to.be.above(0);",
											"})",
											"",
											"pm.test(\"save inventory id\", function() {",
											"    let itemName = pm.environment.get(\"disabled_item_name\");",
											"    let responseJson = pm.response.json();",
											"    let itemID = responseJson.data.id;",
											"    pm.environment.set(\"disabled_item_id\", itemID);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "32e59007-62ec-41f1-a0f0-5351a75a53ca",
										"exec": [
											"let uuid = require('uuid')",
											"pm.environment.set(\"disabled_item_name\", uuid())",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{disabled_item_name}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/inventory",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"inventory"
									]
								}
							},
							"response": []
						},
						{
							"name": "disable item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9299031-ea41-47f3-afd3-bbba717fac9d",
										"exec": [
											"pm.test(\"status is 202\", function() {",
											"    pm.response.to.have.status(202);",
											"})",
											"",
											"pm.test(\"response time is within 30 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(30);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"body contains newly created item name\", function () {",
											"    let jsonData = pm.response.json();",
											"    let expectedItemName = pm.environment.get(\"disabled_item_name\")",
											"    ",
											"    let obj = {",
											"        id: pm.environment.get(\"disabled_item_id\"),",
											"        name: pm.environment.get(\"disabled_item_name\"),",
											"        enabled: false",
											"    }",
											"    ",
											"    pm.expect(jsonData.data).to.deep.include(obj);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"enabled\": false\n}"
								},
								"url": {
									"raw": "localhost:8080/inventory/{{disabled_item_id}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"inventory",
										"{{disabled_item_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check item was disabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ed01e1c-d726-43f9-9fc9-80ddd47172fc",
										"exec": [
											"pm.test(\"status is 200 OK\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"response time is within 20 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(20);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"body contains newly created item name\", function () {",
											"    let jsonData = pm.response.json();",
											"    let expectedItemName = pm.environment.get(\"disabled_item_name\")",
											"    ",
											"    let obj = {",
											"        id: pm.environment.get(\"disabled_item_id\"),",
											"        name: pm.environment.get(\"disabled_item_name\"),",
											"        enabled: false",
											"    }",
											"    ",
											"    pm.expect(jsonData.data).to.deep.include(obj);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/inventory/{{disabled_item_id}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"inventory",
										"{{disabled_item_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check item is disabled in the collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2af58649-ff5c-481b-95c7-264977704d10",
										"exec": [
											"pm.test(\"status is 200 OK\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"response time is within 20 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(20);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"body contains newly created item name\", function () {",
											"    let jsonData = pm.response.json();",
											"    let item = {",
											"        id: pm.environment.get(\"disabled_item_id\"),",
											"        name: pm.environment.get(\"disabled_item_name\"),",
											"        enabled: false",
											"    }",
											"    pm.expect(jsonData.data).to.deep.include(item)",
											"});",
											"",
											"function toType(i) {",
											"    return i.name",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/inventory",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"inventory"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "stock",
			"item": [
				{
					"name": "create one inventory item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99adc374-7d63-41cd-a167-7b6d482ee908",
								"exec": [
									"pm.test(\"status is 201 CREATED\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"response time is within 20 ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(20);",
									"})",
									"",
									"pm.test(\"body is json\", function() {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"pm.test(\"save response ids to env\", function() {",
									"    pm.response.to.be.json;",
									"    ",
									"    let name1 = pm.environment.get(\"inventory_item_name_1\");",
									"    ",
									"    let responseJson = pm.response.json();",
									"    let id1 = responseJson.data.id",
									"",
									"    pm.environment.set(\"inventory_item_id_1\", id1)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "93c2f395-4656-4d5e-a8f9-e46f2a0606c2",
								"exec": [
									"let uuid = require('uuid')",
									"pm.environment.set(\"inventory_item_name_1\", uuid())",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"{{inventory_item_name_1}}\"\n}"
						},
						"url": {
							"raw": "localhost:8080/inventory",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "create second inventory item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d5f1ee3-d4fb-4777-ab5b-104d1d722704",
								"exec": [
									"pm.test(\"status is 201 CREATED\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"response time is within 20 ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(20);",
									"})",
									"",
									"pm.test(\"body is json\", function() {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"pm.test(\"save response ids to env\", function() {",
									"    pm.response.to.be.json;",
									"    ",
									"    let name2 = pm.environment.get(\"inventory_item_name_2\");",
									"    let responseJson = pm.response.json();",
									"    let id2 = responseJson.data.id",
									"",
									"    pm.environment.set(\"inventory_item_id_2\", id2)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d910ed0f-bc4c-4b6f-87a3-6bcd8e08c0bf",
								"exec": [
									"let uuid = require('uuid')",
									"pm.environment.set(\"inventory_item_name_2\", uuid())",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"{{inventory_item_name_2}}\"\n}"
						},
						"url": {
							"raw": "localhost:8080/inventory",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "provision first item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a45078c-4402-4a57-91f0-f4daf7d9db26",
								"exec": [
									"pm.test(\"status is 201 CREATED\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"response time is within 20 ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(20);",
									"})",
									"",
									"pm.test(\"body is json\", function() {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"pm.test(\"contains updated values\", function() {",
									"    let id = pm.environment.get(\"inventory_item_id_1\")",
									"",
									"    let responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.id).to.eql(id)",
									"    pm.expect(responseJson.data.qty).to.eql(3)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "26fa6a63-9704-4b36-b0c1-ec4205a2e1d6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"qty\": 3\n}"
						},
						"url": {
							"raw": "localhost:8080/stock/{{inventory_item_id_1}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"stock",
								"{{inventory_item_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "provision second item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa793598-ee8b-4717-a8ba-f40be4b93515",
								"exec": [
									"pm.test(\"status is 201 CREATED\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"response time is within 20 ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(20);",
									"})",
									"",
									"pm.test(\"body is json\", function() {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"pm.test(\"contains updated values\", function() {",
									"    let id = pm.environment.get(\"inventory_item_id_2\")",
									"    let responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.id).to.eql(id)",
									"    pm.expect(responseJson.data.qty).to.eql(4)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a5b9234c-ce62-4f24-a077-4e49522e07ec",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"qty\": 4\n}"
						},
						"url": {
							"raw": "localhost:8080/stock/{{inventory_item_id_2}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"stock",
								"{{inventory_item_id_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check provisions log",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "793c52b6-6e59-4c3c-84f3-e7ef3ff4eaaa",
								"exec": [
									"pm.test(\"status is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response time is within 20 ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(20);",
									"})",
									"",
									"pm.test(\"body is json\", function() {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"pm.test(\"body contains the log records\", function() {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.json;",
									"    let body = JSON.parse(responseBody);",
									"    ",
									"    let expected = [{",
									"            id: pm.environment.get(\"inventory_item_id_1\"),",
									"            qty: 3",
									"        },{",
									"            id: pm.environment.get(\"inventory_item_id_2\"),",
									"            qty: 4",
									"        }",
									"    ]",
									"",
									"    pm.expect(body.data.map(dropTime)).to.be.an('array')",
									"       .that.deep.includes(expected[0])",
									"        .and.deep.includes(expected[1])",
									"})",
									"",
									"function dropTime(e) {",
									"    return {",
									"        id: e.id,",
									"        qty: e.qty",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:8080/stock/provisionlog",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"stock",
								"provisionlog"
							]
						}
					},
					"response": []
				},
				{
					"name": "check stock position for first item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd47a1fe-b2dc-4f0a-91f6-83ebdf4e9ae3",
								"exec": [
									"pm.test(\"status is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response time is within 50 ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(50);",
									"})",
									"",
									"pm.test(\"body is json\", function() {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"pm.test(\"body contains updated quantities\", function() {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.json;",
									"        ",
									"    let body = JSON.parse(responseBody);",
									"",
									"    let expectedObj = {",
									"        qty: 3",
									"    }",
									"    ",
									"    pm.expect(body.data).to.deep.include(expectedObj)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:8080/stock/{{inventory_item_id_1}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"stock",
								"{{inventory_item_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check updated stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6440bb13-7341-426a-a350-806365b8a1f4",
								"exec": [
									"pm.test(\"status is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response time is within 50 ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(50);",
									"})",
									"",
									"pm.test(\"body is json\", function() {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"pm.test(\"body contains updated quantities\", function() {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.json;",
									"        ",
									"    let body = JSON.parse(responseBody);",
									"    let name1 = pm.environment.get(\"inventory_item_name_1\")",
									"    let name2 = pm.environment.get(\"inventory_item_name_2\")",
									"    ",
									"    let id1 = pm.environment.get(\"inventory_item_id_1\")",
									"    let id2 = pm.environment.get(\"inventory_item_id_2\")",
									"",
									"    let obj1 = {",
									"        id: id1, ",
									"        name: name1,",
									"        qty: 3",
									"    }",
									"",
									"    let obj2 = {",
									"        id: id2,",
									"        name: name2,",
									"        qty: 4",
									"    }",
									"",
									"    pm.expect(body.data).to.be.an('array')",
									"        .that.deep.includes(obj1).and.deep.includes(obj2)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:8080/stock",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"stock"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "recipe/order",
			"item": [
				{
					"name": "create",
					"item": [
						{
							"name": "create one inventory item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24308ff3-8062-4f8c-a7f1-966e571c11e3",
										"exec": [
											"pm.test(\"status is 201 CREATED\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"pm.test(\"response time is within 20 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(20);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"save response ids to env\", function() {",
											"    let name1 = pm.environment.get(\"test_outbound_inventory_item_name_1\");",
											"    ",
											"    let responseJson = pm.response.json();",
											"    let id1 = responseJson.data.id",
											"",
											"    pm.environment.set(\"test_outbound_inventory_item_id_1\", id1)",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3e596d26-04a4-4691-b8e2-23ff9103ff14",
										"exec": [
											"let uuid = require('uuid')",
											"pm.environment.set(\"test_outbound_inventory_item_name_1\", uuid())",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"{{test_outbound_inventory_item_name_1}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/inventory",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"inventory"
									]
								}
							},
							"response": []
						},
						{
							"name": "create second inventory item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69bdb516-7a48-400f-bff0-0ec269a7ac03",
										"exec": [
											"pm.test(\"status is 201 CREATED\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"pm.test(\"response time is within 20 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(20);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"save response ids to env\", function() {",
											"    let name2 = pm.environment.get(\"test_outbound_inventory_item_name_2\");",
											"    let responseJson = pm.response.json();",
											"    let id2 = responseJson.data.id",
											"",
											"    pm.environment.set(\"test_outbound_inventory_item_id_2\", id2)",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eafb003e-ce6d-4da6-871f-c198ddf63ac1",
										"exec": [
											"let uuid = require('uuid')",
											"pm.environment.set(\"test_outbound_inventory_item_name_2\", uuid())",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"{{test_outbound_inventory_item_name_2}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/inventory",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"inventory"
									]
								}
							},
							"response": []
						},
						{
							"name": "provision first item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fcd95a62-6215-4793-8614-c6841bfe3c35",
										"exec": [
											"pm.test(\"status is 201 CREATED\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"pm.test(\"response time is within 20 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(20);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"contains updated values\", function() {",
											"    let id = pm.environment.get(\"test_outbound_inventory_item_id_1\")",
											"    let responseJson = pm.response.json();",
											"    pm.expect(responseJson.data.id).to.eql(id)",
											"    pm.expect(responseJson.data.qty).to.eql(3)",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4833ac8f-f210-4d17-ae19-4ef0fba21439",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"qty\": 3\n}"
								},
								"url": {
									"raw": "localhost:8080/stock/{{test_outbound_inventory_item_id_1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"stock",
										"{{test_outbound_inventory_item_id_1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "provision second item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb1cf9b4-695c-45b2-bcd7-34321ddb141f",
										"exec": [
											"pm.test(\"status is 201 CREATED\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"pm.test(\"response time is within 20 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(20);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"contains updated values\", function() {",
											"    let id = pm.environment.get(\"test_outbound_inventory_item_id_2\")",
											"    let responseJson = pm.response.json();",
											"    pm.expect(responseJson.data.id).to.eql(id)",
											"    pm.expect(responseJson.data.qty).to.eql(4)",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5b3661c-337c-4611-949b-79d52040deb0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"qty\": 4\n}"
								},
								"url": {
									"raw": "localhost:8080/stock/{{test_outbound_inventory_item_id_2}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"stock",
										"{{test_outbound_inventory_item_id_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a two ingredient recipe",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01c4f6c5-e582-4abc-aa10-21d966739feb",
										"exec": [
											"pm.test(\"status is 201 CREATED\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"pm.test(\"response time is within 20 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(20);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"save descriptor entity to env\", function() {",
											"    let recipeName = pm.environment.get(\"test_outbound_recipe_name\");",
											"    let responseJson = pm.response.json();",
											"    let recipeID =  responseJson.data.id",
											"    pm.environment.set(\"test_outbound_recipe_id\", recipeID)",
											"})",
											"",
											"pm.test(\"recipe data are correct\", function () {",
											"    let jsonData = pm.response.json();",
											"    ",
											"    let obj = {",
											"        id: pm.environment.get(\"test_outbound_recipe_id\"),",
											"        name: pm.environment.get(\"test_outbound_recipe_name\"),",
											"        enabled: true",
											"    }",
											"    ",
											"    pm.expect(jsonData.data).to.deep.include(obj);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "528e681f-fb44-47da-aafb-a58a9f8959c4",
										"exec": [
											"let uuid = require('uuid')",
											"pm.environment.set(\"test_outbound_recipe_name\", uuid())",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{test_outbound_recipe_name}}\",\n\t\"items\": {\n\t\t\"{{test_outbound_inventory_item_id_1}}\": 2, \n\t\t\"{{test_outbound_inventory_item_id_2}}\": 3\n\t}\n}"
								},
								"url": {
									"raw": "localhost:8080/recipe",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"recipe"
									]
								}
							},
							"response": []
						},
						{
							"name": "check recipe was created",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "202b0f8a-314a-4198-bfda-88891fb55482",
										"exec": [
											"pm.test(\"Should return 200 OK\", function() {",
											"    pm.response.to.have.status(200)",
											"})",
											"",
											"",
											"pm.test(\"response time is within 50 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(50);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"recipe data is correct\", function () {",
											"    let jsonData = pm.response.json();",
											"    ",
											"    let obj = {",
											"        id: pm.environment.get(\"test_outbound_recipe_id\"),",
											"        name: pm.environment.get(\"test_outbound_recipe_name\"),",
											"        enabled: true",
											"    }",
											"    ",
											"    pm.expect(jsonData.data).to.deep.include(obj);",
											"",
											"    let item1 = {",
											"            id: pm.environment.get(\"test_outbound_inventory_item_id_1\"),",
											"            qty: 2",
											"        }",
											"    let item2 = {",
											"            id: pm.environment.get(\"test_outbound_inventory_item_id_2\"),",
											"            qty: 3",
											"        }",
											"",
											"    pm.expect(jsonData.data.items).to.deep.contain(item1)",
											"    pm.expect(jsonData.data.items).to.deep.contain(item2)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:8080/recipe/{{test_outbound_recipe_id}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"recipe",
										"{{test_outbound_recipe_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check recipe present in the collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd0de228-1472-44e2-b87c-c43752b7539d",
										"exec": [
											"pm.test(\"Should return 200 OK\", function() {",
											"    pm.response.to.have.status(200)",
											"})",
											"",
											"pm.test(\"response time is within 50 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(50);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"recipe data is correct\", function () {",
											"    let jsonData = pm.response.json();",
											"    ",
											"    let ingr1 = {",
											"        id: pm.environment.get(\"test_outbound_inventory_item_id_1\"),",
											"        qty: 2",
											"    }",
											"    let ingr2 = {",
											"        id: pm.environment.get(\"test_outbound_inventory_item_id_2\"),",
											"        qty: 3",
											"    }",
											"",
											"    let obj = {",
											"        id: pm.environment.get(\"test_outbound_recipe_id\"),",
											"        name: pm.environment.get(\"test_outbound_recipe_name\"),",
											"        items: [ingr1, ingr2],",
											"        enabled: true",
											"    }",
											"    ",
											"    pm.expect(jsonData.data).to.deep.include(obj);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:8080/recipe",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"recipe"
									]
								}
							},
							"response": []
						},
						{
							"name": "place order for recipe",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bccef4ab-f158-4cb4-9a95-16fb1e4eca38",
										"exec": [
											"pm.test(\"response is 201 CREATED\", function() {",
											"    pm.response.to.have.status(201)",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": {{test_outbound_recipe_id}},\n\t\"qty\": 1\n}"
								},
								"url": {
									"raw": "localhost:8080/order",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"order"
									]
								}
							},
							"response": []
						},
						{
							"name": "check order is present in log",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bef31f8-6d40-421b-b62b-c0a5f71c1293",
										"exec": [
											"pm.test(\"status is OK\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"response time is within 20 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(20);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"body contains the order\", function() {",
											"    let body = JSON.parse(responseBody);",
											"    let recipeID = pm.environment.get(\"test_outbound_recipe_id\");",
											"    ",
											"    let expected = {",
											"        recipeID: recipeID,",
											"        qty: 1",
											"    }",
											"",
											"    pm.expect(body.data.map(dropID)).to.be.an('array')",
											"       .that.deep.includes(expected)",
											"})",
											"",
											"function dropID(e) {",
											"    return {",
											"        recipeID: e.recipeID,",
											"        qty: e.qty",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:8080/order",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"order"
									]
								}
							},
							"response": []
						},
						{
							"name": "place more orders than there is stock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a66955f-4029-4b8a-91d6-a92feecdf635",
										"exec": [
											"pm.test(\"Should return 400\", function() {",
											"    pm.response.to.have.status(400)",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": {{test_outbound_recipe_id}},\n\t\"qty\": 1\n}"
								},
								"url": {
									"raw": "localhost:8080/order",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"order"
									]
								}
							},
							"response": []
						},
						{
							"name": "show stock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b967714-c6a5-47f5-b23c-950d8eed2910",
										"exec": [
											"pm.test(\"status is 200 OK\", function() {",
											"    pm.response.to.have.status(200)",
											"})",
											"",
											"pm.test(\"contains updated values\", function() {",
											"    pm.response.to.not.be.error;",
											"    pm.response.to.be.json;",
											"    ",
											"    let body = JSON.parse(responseBody);",
											"",
											"    let obj1 = {",
											"        id:  pm.environment.get(\"test_outbound_inventory_item_id_1\"),",
											"        name: pm.environment.get(\"test_outbound_inventory_item_name_1\"),",
											"        qty: 1",
											"    }",
											"",
											"    let obj2 = {",
											"        id: pm.environment.get(\"test_outbound_inventory_item_id_2\"),",
											"        name: pm.environment.get(\"test_outbound_inventory_item_name_2\"),",
											"        qty: 1",
											"    }",
											"",
											"    pm.expect(body.data).to.be.an('array')",
											"        .that.deep.includes(obj1)",
											"        .and.deep.includes(obj2)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:8080/stock",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"stock"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "disable",
					"item": [
						{
							"name": "create one inventory item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09374442-eeba-4a00-9317-8b0a56c24c2e",
										"exec": [
											"pm.test(\"status is 201 CREATED\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"pm.test(\"response time is within 50 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(50);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"save response ids to env\", function() {",
											"    let name1 = pm.environment.get(\"disable_recipe_item_name_1\");",
											"    ",
											"    let responseJson = pm.response.json();",
											"    let id1 = responseJson.data.id",
											"",
											"    pm.environment.set(\"disable_recipe_item_id_1\", id1)",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "90292f5e-b6d9-4b7a-9dc3-23cf436753d1",
										"exec": [
											"let uuid = require('uuid')",
											"pm.environment.set(\"disable_recipe_item_name_1\", uuid())",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"{{disable_recipe_item_name_1}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/inventory",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"inventory"
									]
								}
							},
							"response": []
						},
						{
							"name": "provision stock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f73bf01-7953-4b60-b785-d905274cb00b",
										"exec": [
											"pm.test(\"status is 201 CREATED\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"pm.test(\"response time is within 20 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(20);",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f88a57b5-c0f4-453e-be8b-af7f2d3102c1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"qty\": 9\n}"
								},
								"url": {
									"raw": "localhost:8080/stock/{{disable_recipe_item_id_1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"stock",
										"{{disable_recipe_item_id_1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create salad recipe",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f856daf-dd4f-466e-8aea-6399366a7d21",
										"exec": [
											"pm.test(\"status is 201 CREATED\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"pm.test(\"response time is within 20 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(20);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"save descriptor entity to env\", function() {",
											"    let recipeName = pm.environment.get(\"disable_recipe_name\");",
											"    let responseJson = pm.response.json();",
											"    let recipeID =  responseJson.data.id",
											"    pm.environment.set(\"disable_recipe_id\", recipeID)",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "49e5662f-0237-48eb-acd5-bb22b20d17db",
										"exec": [
											"let uuid = require('uuid')",
											"pm.environment.set(\"disable_recipe_name\", uuid())",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{disable_recipe_name}}\",\n\t\"items\": {\n\t\t\"{{disable_recipe_item_id_1}}\": 2\n\t}\n}"
								},
								"url": {
									"raw": "localhost:8080/recipe",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"recipe"
									]
								}
							},
							"response": []
						},
						{
							"name": "check recipe is enabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96ff59c6-4011-4128-b032-1c976f2b952a",
										"exec": [
											"pm.test(\"Should return 200\", function() {",
											"    pm.response.to.have.status(200)",
											"})",
											"",
											"pm.test(\"response time is within 50 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(50);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"recipe is disabled\", function () {",
											"    let jsonData = pm.response.json();",
											"    ",
											"    let obj = {",
											"        id: pm.environment.get(\"disable_recipe_id\"),",
											"        name: pm.environment.get(\"disable_recipe_name\"),",
											"        enabled: true",
											"    }",
											"    ",
											"    pm.expect(jsonData.data).to.deep.include(obj);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:8080/recipe/{{disable_recipe_id}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"recipe",
										"{{disable_recipe_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "disable recipe",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fe0a454-a9c2-4fc1-ba6e-90c1ccf12215",
										"exec": [
											"pm.test(\"status is 200 OK\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"response time is within 50 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(50);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"recipe is disabled\", function () {",
											"    let jsonData = pm.response.json();",
											"    ",
											"    let obj = {",
											"        id: pm.environment.get(\"disable_recipe_id\"),",
											"        name: pm.environment.get(\"disable_recipe_name\"),",
											"        enabled: false",
											"    }",
											"    ",
											"    pm.expect(jsonData.data).to.deep.include(obj);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "673bb396-f38e-41dc-8ad0-18b6d85600b7",
										"exec": [
											"let uuid = require('uuid')",
											"pm.environment.set(\"test_outbound_recipe_name\", uuid())",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"enabled\": false\n}"
								},
								"url": {
									"raw": "localhost:8080/recipe/{{disable_recipe_id}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"recipe",
										"{{disable_recipe_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check recipe was disabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f2d5fc3-62f7-4b69-9601-982bb40e68bc",
										"exec": [
											"pm.test(\"Should return 200\", function() {",
											"    pm.response.to.have.status(200)",
											"})",
											"",
											"pm.test(\"response time is within 50 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(50);",
											"})",
											"",
											"pm.test(\"body is json\", function() {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"pm.test(\"recipe is disabled\", function () {",
											"    let jsonData = pm.response.json();",
											"    ",
											"    let obj = {",
											"        id: pm.environment.get(\"disable_recipe_id\"),",
											"        name: pm.environment.get(\"disable_recipe_name\"),",
											"        enabled: false",
											"    }",
											"    ",
											"    pm.expect(jsonData.data).to.deep.include(obj);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:8080/recipe/{{disable_recipe_id}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"recipe",
										"{{disable_recipe_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "can not place order for disabled recipe",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2019938-fa45-4d57-9725-fa629d9d7551",
										"exec": [
											"pm.test(\"Should return 400\", function() {",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"pm.test(\"response time is within 50 ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(50);",
											"})",
											"",
											"pm.test(\"recipe is disabled\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"recipe not valid\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": {{disable_recipe_id}},\n\t\"qty\": 1\n}"
								},
								"url": {
									"raw": "http://localhost:8080/order",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"order"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "224d7f26-986e-4549-ab9d-3a908d12a3bc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d5e91a88-f0dd-4fcf-8e32-8ab9c0fdfb4c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}