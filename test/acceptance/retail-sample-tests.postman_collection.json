{
	"info": {
		"_postman_id": "706b79fb-396b-41aa-b6aa-2ab3251aded2",
		"name": "retail-sample-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "add inventory types",
			"item": [
				{
					"name": "create inventory item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c31e861-0575-44aa-bc79-654149ef2864",
								"exec": [
									"pm.test(\"status is 201 CREATED\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"response time is within 20 ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(20);",
									"})",
									"",
									"pm.test(\"body is json\", function() {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"pm.test(\"descriptor entity has an id\", function() {",
									"    let itemName = pm.environment.get(\"inventory_item_name\")",
									"",
									"    let responseJson = pm.response.json();",
									"    pm.expect(responseJson.data[itemName]).to.be.above(0)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "25053f10-b9df-4ca6-bb35-6a5ba019f934",
								"exec": [
									"let uuid = require('uuid')",
									"pm.environment.set(\"inventory_item_name\", uuid())",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ \"{{inventory_item_name}}\" ]"
						},
						"url": {
							"raw": "localhost:8080/inventory",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "check inventory item was created",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75ca381f-7e07-4402-a47d-3171f54133ee",
								"exec": [
									"pm.test(\"status is 200 OK\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response time is within 20 ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(20);",
									"})",
									"",
									"pm.test(\"body is json\", function() {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"pm.test(\"body contains newly created item name\", function () {",
									"    let jsonData = pm.response.json();",
									"    let expectedItemName = pm.environment.get(\"inventory_item_name\")",
									"    pm.expect(jsonData.data.map(toType)).to.include.members([expectedItemName]);",
									"});",
									"",
									"function toType(i) {",
									"    return i.name",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/inventory",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"inventory"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "provision stock",
			"item": [
				{
					"name": "create two inventory items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c31e861-0575-44aa-bc79-654149ef2864",
								"exec": [
									"pm.test(\"status is 201 CREATED\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"response time is within 20 ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(20);",
									"})",
									"",
									"pm.test(\"body is json\", function() {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"pm.test(\"save response ids to env\", function() {",
									"    pm.response.to.be.json;",
									"    ",
									"    let name1 = pm.environment.get(\"inventory_item_name_1\");",
									"    let name2 = pm.environment.get(\"inventory_item_name_2\");",
									"    ",
									"    let responseJson = pm.response.json();",
									"    let id1 = responseJson.data[name1]",
									"    let id2 = responseJson.data[name2]",
									"",
									"    pm.environment.set(\"inventory_item_id_1\", id1)",
									"    pm.environment.set(\"inventory_item_id_2\", id2)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "81b3ec2e-02a1-422b-a5d6-bb33270f2ad6",
								"exec": [
									"let uuid = require('uuid')",
									"pm.environment.set(\"inventory_item_name_1\", uuid())",
									"pm.environment.set(\"inventory_item_name_2\", uuid())",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ \"{{inventory_item_name_1}}\", \"{{inventory_item_name_2}}\"]"
						},
						"url": {
							"raw": "localhost:8080/inventory",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "provision stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c31e861-0575-44aa-bc79-654149ef2864",
								"exec": [
									"pm.test(\"status is 201 CREATED\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"response time is within 20 ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(20);",
									"})",
									"",
									"pm.test(\"body is json\", function() {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"pm.test(\"contains updated values\", function() {",
									"    let id1 = pm.environment.get(\"inventory_item_id_1\")",
									"    let id2 = pm.environment.get(\"inventory_item_id_2\")",
									"",
									"    let responseJson = pm.response.json();",
									"    pm.expect(responseJson.data[id1]).to.eql(3)",
									"    pm.expect(responseJson.data[id2]).to.eql(4)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ac3bdd1c-d58b-4718-be4a-d2762bb66b0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"{{inventory_item_id_1}}\": 3, \n\t\"{{inventory_item_id_2}}\": 4\n}"
						},
						"url": {
							"raw": "localhost:8080/stock",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"stock"
							]
						}
					},
					"response": []
				},
				{
					"name": "check provisions log",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c31e861-0575-44aa-bc79-654149ef2864",
								"exec": [
									"pm.test(\"status is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response time is within 20 ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(20);",
									"})",
									"",
									"pm.test(\"body is json\", function() {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"pm.test(\"body contains the log records\", function() {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.json;",
									"    let body = JSON.parse(responseBody);",
									"    ",
									"    let expected = [{",
									"            id: pm.environment.get(\"inventory_item_id_1\"),",
									"            qty: 3",
									"        },{",
									"            id: pm.environment.get(\"inventory_item_id_2\"),",
									"            qty: 4",
									"        }",
									"    ]",
									"",
									"    pm.expect(body.inbounds.map(dropTime)).to.be.an('array')",
									"       .that.deep.includes(expected[0])",
									"        .and.deep.includes(expected[1])",
									"})",
									"",
									"function dropTime(e) {",
									"    return {",
									"        id: e.id,",
									"        qty: e.qty",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:8080/log/provision",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"log",
								"provision"
							]
						}
					},
					"response": []
				},
				{
					"name": "check updated stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c31e861-0575-44aa-bc79-654149ef2864",
								"exec": [
									"pm.test(\"status is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response time is within 20 ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(20);",
									"})",
									"",
									"pm.test(\"body is json\", function() {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"pm.test(\"body contains updated quantities\", function() {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.json;",
									"        ",
									"    let body = JSON.parse(responseBody);",
									"    let name1 = pm.environment.get(\"inventory_item_name_1\")",
									"    let name2 = pm.environment.get(\"inventory_item_name_2\")",
									"    ",
									"    let orange = {",
									"        name: name1,",
									"        qty: 3",
									"    }",
									"",
									"    let kiwi = {",
									"        name: name2,",
									"        qty: 4",
									"    }",
									"",
									"    pm.expect(body.data).to.be.an('array')",
									"        .that.deep.includes(orange)",
									"        .and.deep.includes(kiwi)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:8080/stock",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"stock"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "outbound",
			"item": [
				{
					"name": "create two inventory items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c31e861-0575-44aa-bc79-654149ef2864",
								"exec": [
									"pm.test(\"status is 201 CREATED\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"",
									"pm.test(\"save response ids to env\", function() {",
									"    pm.response.to.be.json;",
									"    ",
									"    let name1 = pm.environment.get(\"test_outbound_inventory_item_name_1\");",
									"    let name2 = pm.environment.get(\"test_outbound_inventory_item_name_2\");",
									"    ",
									"    let responseJson = pm.response.json();",
									"    let id1 = responseJson.data[name1]",
									"    let id2 = responseJson.data[name2]",
									"",
									"    pm.environment.set(\"test_outbound_inventory_item_id_1\", id1)",
									"    pm.environment.set(\"test_outbound_inventory_item_id_2\", id2)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b148d126-c063-4799-ad11-1c952ac52d8f",
								"exec": [
									"let uuid = require('uuid')",
									"pm.environment.set(\"test_outbound_inventory_item_name_1\", uuid())",
									"pm.environment.set(\"test_outbound_inventory_item_name_2\", uuid())",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ \"{{test_outbound_inventory_item_name_1}}\", \"{{test_outbound_inventory_item_name_2}}\"]"
						},
						"url": {
							"raw": "localhost:8080/inventory",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "provision stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c31e861-0575-44aa-bc79-654149ef2864",
								"exec": [
									"pm.test(\"status is 202 ACCEPTED\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"{{test_outbound_inventory_item_id_1}}\": 3, \n\t\"{{test_outbound_inventory_item_id_2}}\": 4\n}"
						},
						"url": {
							"raw": "localhost:8080/stock",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"stock"
							]
						}
					},
					"response": []
				},
				{
					"name": "create salad recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c31e861-0575-44aa-bc79-654149ef2864",
								"exec": [
									"pm.test(\"status is 201 CREATED\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"response time is within 20 ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(20);",
									"})",
									"",
									"pm.test(\"body is json\", function() {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"pm.test(\"save descriptor entity to env\", function() {",
									"    let recipeName = pm.environment.get(\"test_outbound_recipe_name\");",
									"    let responseJson = pm.response.json();",
									"    let recipeID =  responseJson.data[recipeName]",
									"    pm.environment.set(\"test_outbound_recipe_id\", recipeID)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c45830f6-0b0d-4f14-a92a-3876f01b251c",
								"exec": [
									"let uuid = require('uuid')",
									"pm.environment.set(\"test_outbound_recipe_name\", uuid())",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{test_outbound_recipe_name}}\",\n\t\"items\": {\n\t\t\"{{test_outbound_inventory_item_id_1}}\": 2, \n\t\t\"{{test_outbound_inventory_item_id_2}}\": 3\n\t}\n}"
						},
						"url": {
							"raw": "localhost:8080/recipe",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"recipe"
							]
						}
					},
					"response": []
				},
				{
					"name": "check salad recipe was created",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c31e861-0575-44aa-bc79-654149ef2864",
								"exec": [
									"pm.test(\"Should return 200\", function() {",
									"    pm.response.to.have.status(200)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:8080/recipe",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"recipe"
							]
						}
					},
					"response": []
				},
				{
					"name": "sell one salad",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c31e861-0575-44aa-bc79-654149ef2864",
								"exec": [
									"pm.test(\"Should return 204\", function() {",
									"    pm.response.to.have.status(204)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": {{test_outbound_recipe_id}},\n\t\"qty\": 1\n}"
						},
						"url": {
							"raw": "localhost:8080/order",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "sell more salad than we have stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c31e861-0575-44aa-bc79-654149ef2864",
								"exec": [
									"pm.test(\"Should return 400\", function() {",
									"    pm.response.to.have.status(400)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": {{test_outbound_recipe_id}},\n\t\"qty\": 1\n}"
						},
						"url": {
							"raw": "localhost:8080/order",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "show stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c31e861-0575-44aa-bc79-654149ef2864",
								"exec": [
									"pm.test(\"Should return 200\", function() {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"Should have oranges and kiwis\", function() {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.json;",
									"    ",
									"    let body = JSON.parse(responseBody);",
									"    ",
									"    let oneCarrot = {",
									"        name: pm.environment.get(\"test_outbound_inventory_item_name_1\"),",
									"        qty: 1",
									"    }",
									"    ",
									"    let oneOnion = {",
									"        name: pm.environment.get(\"test_outbound_inventory_item_name_2\"),",
									"        qty: 1",
									"    }",
									"",
									"    pm.expect(body.data).to.be.an('array')",
									"        .that.deep.includes(oneCarrot)",
									"        .and.deep.includes(oneOnion)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:8080/stock",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"stock"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "health",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "75ca381f-7e07-4402-a47d-3171f54133ee",
						"exec": [
							"pm.test(\"response should be 200\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8081/health",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"health"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}